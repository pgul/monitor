dnl $Id$
dnl Process this file with autoconf to produce a configure script.
AC_INIT(monitor.c)

dnl Checks for programs.
AC_PROG_CC
AC_PATH_PROG(PERL, perl, perl)

CFLAGS=
dnl Checks for header files.
AC_CHECK_HEADERS(sys/ioctl.h net/if_vlan_var.h net/ethernet.h)
AC_CHECK_HEADERS(netinet/if_ether.h pcap.h getopt.h net/if_dl.h)
case x$ac_cv_header_pcap_h in
  xno)
    AC_CHECK_HEADERS(pcap/pcap.h)
    case x$ac_cv_header_pcap_pcap_h in
      xno)
        AC_MSG_CHECKING(for -I /usr/include/pcap needed for pcap.h)
        OLD_CFLAGS=$CFLAGS
        CFLAGS="$CFLAGS -I /usr/include/pcap"
        AC_TRY_COMPILE([#include <pcap.h>],[],
           AC_DEFINE(HAVE_PCAP_H) AC_MSG_RESULT(yes); ac_cv_header_ext_pcap_h=yes,
           AC_MSG_RESULT(no))
        case x$ac_cv_header_ext_pcap_h in
          xno)
            AC_MSG_CHECKING(for -I /usr/contrib/include needed for pcap.h)
            CFLAGS="$OLD_CFLAGS -I /usr/contrib/include"
            AC_TRY_COMPILE([#include <pcap.h>],[],
             AC_DEFINE(HAVE_PCAP_H) AC_MSG_RESULT(yes); ac_cv_header_ext2_pcap_h=yes,
             AC_MSG_RESULT(no))
            ;;
        esac
        ;;
     esac
     ;;
esac


dnl Checks for typedefs, structures, and compiler characteristics.

dnl Checks for library functions.

AC_CHECK_FUNCS(inet_addr)
case x$ac_cv_func_inet_addr in
  xno)
    AC_MSG_CHECKING(for inet_addr in -lxnet)
    OLD_LIBS=$LIBS
    LIBS="$LIBS -lxnet"
    AC_TRY_LINK([#include <arpa/inet.h>],[inet_addr("");],
          AC_MSG_RESULT(yes), AC_MSG_RESULT(no); AC_ERROR(no inet_addr() found))
    ;;
esac

AC_CHECK_FUNCS(daemon getifaddrs)

OLD_LIBS=$LIBS
LIBS="$LIBS -lpcap"
AC_MSG_CHECKING(for libpcap)
AC_TRY_LINK([],[pcap_open_live();],AC_MSG_RESULT(yes),
     AC_MSG_RESULT(no); AC_ERROR(no libpcap found))

AC_MSG_CHECKING(for pcap_open_live_new())
AC_TRY_LINK([],[pcap_open_live_new();],
dnl AC_CHECK_LIB(pcap, pcap_open_live_new,
     AC_DEFINE(HAVE_PCAP_OPEN_LIVE_NEW) AC_MSG_RESULT(yes); live_new=yes,
     AC_MSG_RESULT(no))

case x$live_new in
  xyes)
    OLD_CFLAGS=$CFLAGS
    CFLAGS="$CFLAGS -Wimplicit-function-declaration -Werror"
    AC_MSG_CHECKING(for pcap_open_live_new() proto)
    AC_TRY_COMPILE([
         #if defined(HAVE_PCAP_H)
         #include <pcap.h>
         #elif defined(HAVE_PCAP_PCAP_H)
         #include <pcap/pcap.h>
         #endif
       ], [pcap_open_live_new();],
       AC_MSG_RESULT(yes),
       AC_DEFINE(NEED_PCAP_OPEN_LIVE_NEW_PROTO) AC_MSG_RESULT(no))
    CFLAGS=$OLD_CFLAGS
    OLD_CFLAGS=
    ;;
esac

AC_MSG_CHECKING(for pkt_type in struct pcap_pkthdr)
AC_TRY_COMPILE([
    #if defined(HAVE_PCAP_H)
    #include <pcap.h>
    #elif defined(HAVE_PCAP_PCAP_H)
    #include <pcap/pcap.h>
    #endif
  ], [struct pcap_pkthdr pk; pk.pkt_type;],
  AC_DEFINE(HAVE_PKT_TYPE) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

dnl Check for trunk
AC_ARG_WITH(vlans,
            [  --with-vlans            802.1q vlans support (default no)],
            do_trunk=yes, do_trunk=no)
case x$do_trunk in
  xyes)
    ;;
  *)
    AC_DEFINE(NO_TRUNK)
    ;;
esac

dnl Check for ports
AC_ARG_WITH(ports,
            [  --with-ports            Analize tcp/udp ports (default yes)])
case x$withval in
  xno)
    ;;
  *)
    AC_DEFINE(WITH_PORTS)
    AC_MSG_CHECKING(for th_sport in struct tcphdr)
    AC_TRY_COMPILE([
	#include <sys/types.h>
	#include <netinet/tcp.h>
	], [struct tcphdr th; th.th_sport;],
	AC_MSG_RESULT(yes),
	AC_DEFINE_UNQUOTED(th_sport, source)
	AC_DEFINE_UNQUOTED(th_dport, dest)
	AC_DEFINE_UNQUOTED(uh_sport, source)
	AC_DEFINE_UNQUOTED(uh_dport, dest)
	AC_MSG_RESULT(no))
    ;;
esac

dnl Check for embedded perl
AC_ARG_WITH(perl,
            [  --with-perl             embedded perl support (default no)],
            do_perl=yes, do_perl=no)
case x$do_perl in
  xyes)
   AC_MSG_CHECKING(for libperl)
   PERLDIR=`$PERL -MConfig -e 'print $Config{archlib}' 2>/dev/null`
   if PERLCOPT=`$PERL -MExtUtils::Embed -e ccopts 2>/dev/null`
   then
     PERLLOPT=`$PERL -MExtUtils::Embed -e ldopts`
     case x$PERLDIR in
       x)
         AC_MSG_RESULT(yes)
         ;;
       *)
         AC_MSG_RESULT($PERLDIR)
         ;;
     esac
   else
     case x$PERLDIR in
       x)
         AC_MSG_RESULT(no)
         ;;
       *)
         PERLCOPT="-I $PERLDIR/CORE -Dbool=char -DHAS_BOOL"
         PERLLOPT="$PERLDIR/auto/DynaLoader/DynaLoader.a -L$PERLDIR/CORE -lperl -ldl -lcrypt -lm"
         AC_CHECK_LIB(dl, main, PERLLOPT="$PERLLOPT -ldl")
         AC_CHECK_LIB(crypt, main, PERLLOPT="$PERLLOPT -lcrypt")
         AC_CHECK_LIB(m, main, PERLLOPT="$PERLLOPT -lm")
         AC_CHECK_LIB(socket, main, PERLLOPT="$PERLLOPT -lsocket")
         AC_MSG_RESULT($PERLDIR)
         ;;
     esac
   fi
   case x$PERLCOPT in
     x)
       ;;
     *)
       AC_MSG_CHECKING(for working libperl)
       OLD_LIBS=$LIBS
       OLD_CFLAGS=$CFLAGS
       LIBS="$LIBS $PERLLOPT"
       CFLAGS="$CFLAGS $PERLCOPT"
       AC_TRY_RUN([
          #include <EXTERN.h>
          #include <perl.h>
          #include <XSUB.h>
          int main(int argc, char** argv, char** env) {
            return perl_alloc() ? 0 : 1;
          }],
        AC_DEFINE(DO_PERL) AC_MSG_RESULT(yes); WORKING_PERL=yes;
	perlsrc=monperl.c,
        AC_MSG_RESULT(no); CFLAGS=$OLD_CFLAGS; LIBS=$OLD_LIBS,
        AC_MSG_RESULT(cross-compiling. No assumptions made); CFLAGS=$OLD_CFLAGS; LIBS=$OLD_LIBS
       )
       ;;
   esac
   ;;
esac

dnl Check for MySQL
AC_ARG_WITH(mysql,
            [  --with-mysql            MySQL support (default no)],
            do_mysql=yes, do_mysql=no)
case x$do_mysql in
  xyes)
   AC_MSG_CHECKING(for mysql)
   OLD_CFLAGS=$CFLAGS
   OLD_LDFLAGS=$LDFLAGS
   OLD_LIBS=$LIBS
   CFLAGS="$CFLAGS -I /usr/local/include/mysql"
   AC_TRY_COMPILE([#include <mysql.h>], [], mysql_ok=yes, mysql_ok=no)
   case x$mysql_ok in
     xno)
      CFLAGS="$OLD_CFLAGS -I /usr/include/mysql"
      AC_TRY_COMPILE([#include <mysql.h>], [], mysql_ok=yes, mysql_ok=no)
      ;;
   esac
   case x$mysql_ok in
     xyes)
      LIBS="$LIBS -lmysqlclient"
      LDFLAGS="$LDFLAGS -L /usr/local/lib/mysql"
      AC_TRY_LINK([#include <mysql.h>], [mysql_init(0)],
                  mysql_ok=yes, mysql_ok=no)
      case x$mysql_ok in
        xno)
         LDFLAGS="$OLD_LDFLAGS -L /usr/lib/mysql"
         AC_TRY_LINK([#include <mysql.h>], [mysql_init(0)],
                     mysql_ok=yes, mysql_ok=no)
        ;;
      esac
      ;;
   esac
   case x$mysql_ok in
      xyes)
       AC_DEFINE(DO_MYSQL)
       AC_MSG_RESULT(yes)
       ;;
      xno)
       CFLAGS=$OLD_CFLAGS
       LDFLAGS=$OLD_LDFLAGS
       LIBS=$OLD_LIBS
       AC_MSG_RESULT(no)
       ;;
   esac
   ;;
esac

dnl Set dirs
logdir=/var/log/monitor
AC_ARG_WITH(logdir,
     [  --with-logdir=path      log files directory (default /var/log/monitor)],
     [logdir=$withval],[])
AC_DEFINE_UNQUOTED(LOGDIR, "$logdir")

dnl Set debug flags
AC_ARG_WITH(debug,
     [  --with-debug            compile with debug info],
     [CFLAGS="-g $CFLAGS"],[CFLAGS="-O3 $CFLAGS"])

dnl Set shmem params
nbits=2
maxprefix=24
AC_ARG_WITH(nbits,
     [  --with-nbits=NBITS      set number of bits for class of addr (2)],
     [nbits=$withval],[])
AC_ARG_WITH(minprefix,
     [  --with-maxprefix=LEN    set maximum prefix length (24)],
     [maxprefix=$withval],[])
[if echo $nbits | grep -q '[^0-9]' || [ $nbits -ne 1 -a $nbits -ne 2 -a $nbits -ne 4 -a $nbits -ne 8 -a $nbits -ne 16 ]]
then
	AC_ERROR(Incorrect nbits value $nbits, must be 1..16, power of 2)
fi
[if echo $maxprefix | grep -q '[^0-9]' || [ $maxprefix -gt 32 -o $maxprefix -lt 16 ]]
then
	AC_ERROR(Incorrect nbits value $nbits, must be 1..16, power of 2)
fi

AC_DEFINE_UNQUOTED(NBITS, $nbits)
AC_DEFINE_UNQUOTED(MAXPREFIX, $maxprefix)
AC_SUBST(perlsrc)

AC_OUTPUT(Makefile)
